package nl.BuilTD.Model.Objects.Units;

import android.graphics.Matrix;
import android.graphics.Path;
import android.graphics.PathMeasure;

/**
 * Created by jonathan on 11-3-15.
 */
public abstract class Unit {


    //attributen
    protected boolean flying = false;
    protected int health;
    protected double speed;
    		// protected int waveNumber; niet persee nodig
    protected double armorValue;
    protected int baseValue;
    // damage = de damage die deze unit heeft opgelopen.
    // op deze manier kunnen wee de health weergeven in bijv: een health bar / percentage
    protected int damage;
    float[] pos = new float[2];
    float[] tan = new float[2];
    float distance;
    private int SPEED = 20;
    private Path path;
    private PathMeasure pathMeasure;
    private Matrix matrix = new Matrix();
    private float curX = 0;
    private float curY = 0;
    private float stepAngle = 10;
    private float curAngle = 0;
    private float targetAngle = 0;
    private int bitmapOffsetX = 16;
    private int bitmapOffsetY = 16;
    
    // atributen
    // protected boolean slowed = false;
    


    // auto generated, nog niet compleet
    public Unit(int health, double speed, double armorValue, int baseValue, Path path) {
        this.health = health;
        this.speed = speed;
        this.armorValue = armorValue;
        this.baseValue = baseValue;
        this.path = path;

        pathMeasure = new PathMeasure(path, false);
        pathMeasure.getPosTan(distance, pos, tan);



    }

    public Unit(int health, double speed, double armorValue, int baseValue, Path path, boolean flying) {
        this.health = health;
        this.speed = speed;
        this.armorValue = armorValue;
        this.baseValue = baseValue;
        this.path = path;
        this.flying = flying;

        pathMeasure = new PathMeasure(path, false);
        pathMeasure.getPosTan(distance, pos, tan);

    }





    public int getBaseValue(){
    	return baseValue;
    }
	public int getHealth() {
		return health;
	}
	public double getSpeed() {
		return speed;
	}
	public double getArmorValue() {
		return armorValue;
	}
	public void addDamage(int damage){
		this.damage =+ damage;
	}
	public int getDamage(){
		return damage;
	}


    /**Maakt een matrix waarmee de unit getekend kan worden.
     * de unit legt alleen afstand af als deze niet aan het draaien is.
     *
     *
     * @return
     */
    public Matrix getMatrix() {


        matrix.reset();

        // als de unit schuin staat maakt matrix
        if ((targetAngle - curAngle) > stepAngle) {
            curAngle += stepAngle;


            matrix.postRotate(curAngle, bitmapOffsetX, bitmapOffsetY);
            matrix.postTranslate(curX, curY);

            return matrix;


        }
        // unit staat schuin
        if ((curAngle - targetAngle) > stepAngle) {
            curAngle -= stepAngle;


            matrix.postRotate(curAngle, bitmapOffsetX, bitmapOffsetY);
            matrix.postTranslate(curX, curY);

            return matrix;


        } else {

            // unit is recht en kan bewegen
            curAngle = targetAngle;

            // get the pos and tan
            pathMeasure.getPosTan(distance, pos, tan);
            // recalculate the angle
            targetAngle = (float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI);
            // rotate the matrix
            matrix.postRotate(curAngle, bitmapOffsetX, bitmapOffsetY);

            // set the current x and y
            curX = pos[0] - bitmapOffsetX;
            curY = pos[1] - bitmapOffsetY;

            //translate
            matrix.postTranslate(curX, curY);
            //move
            this.distance += SPEED;
            return matrix;
        }


    }


   


    // kortste pad berekenen

        // bereken gelijk score en paas door. score aan de hand van tijd... formule


    // kortste pad lopen van bases



}
